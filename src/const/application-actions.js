const actionTypes = {
  ALGORITHM_APPLY_VERSIONS: `ALGORITHM_APPLY_VERSIONS`,
  ALGORITHM_VERSIONNAME_UPDATE: `ALGORITHM_VERSIONNAME_UPDATE`,
  ALGORITHM_APPLY: `ALGORITHM_APPLY`,
  ALGORITHM_ADD_NEW: `ALGORITHM_ADD_NEW`,
  ALGORITHM_DELETE_VERSIONS: `ALGORITHM_DELETE_VERSIONS`,
  ALGORITHM_DELETE: `ALGORITHM_DELETE`,
  ALGORITHM_GET_VERSIONS: `ALGORITHM_GET_VERSIONS`,
  ALGORITHM_STORE: `ALGORITHM_STORE`,
  ALGORITHM_RUN: `ALGORITHM_RUN`,
  AUTO_COMPLETE_UPDATE_FILTER: `AUTO_COMPLETE_UPDATE_FILTER`,
  BOARD_SET_URL: `BOARD_SET_URL`,
  DATASOURCE_FETCH_ALL: 'DATASOURCE_FETCH_ALL',
  DATASOURCE_DELETE: 'DATASOURCE_DELETE',
  DATASOURCE_FETCH_VERSIONS: 'DATASOURCE_FETCH_VERSIONS',
  DATASOURCE_FETCH: 'DATASOURCE_FETCH',
  DATASOURCE_CREATE: 'DATASOURCE_CREATE',
  DATASOURCE_POST_VERSION: 'DATASOURCE_POST_VERSION',
  SNAPSHOT_POST: 'SNAPSHOT_POST',
  SNAPSHOT_FETCH_ALL: 'SNAPSHOT_FETCH_ALL',
  SET_HKUBE_VERSION: `SET_HKUBE_VERSION`,
  BUILD_RERUN: `BUILD_RERUN`,
  BUILD_STOP: `BUILD_STOP`,
  CLOSE_SIDEBAR: `CLOSE_SIDEBAR`,
  CLOSE_TERMINAL_CLIENT: `CLOSE_TERMINAL_CLIENT`,
  CONNECTION_STATUS_CHANGE: `CONNECTION_STATUS_CHANGE`,
  DRAWER_OPEN: `DRAWER_OPEN`,
  DRAWER_TOGGLE: `DRAWER_TOGGLE`,
  EXPERIMENT_CHANGE: `EXPERIMENT_CHANGE`,
  SET_EXPERIMENT_LOADING: `SET_EXPERIMENT_LOADING`,
  TOGGLE_EXPERIMENT_LOADING: `TOGGLE_EXPERIMENT_LOADING`,
  EXPERIMENT_ADD: `EXPERIMENT_ADD`,
  EXPERIMENT_DELETE: `EXPERIMENT_DELETE`,
  FILTER_TYPES: `FILTER_TYPES`,
  JOBS_EXEC_CACHING: `JOBS_EXEC_CACHING`,
  JOBS_KUBERNETES_LOGS: `JOBS_KUBERNETES_LOGS`,
  PIPELINE_ADD: `PIPELINE_ADD`,
  PIPELINE_CRON_START: `PIPELINE_CRON_START`,
  PIPELINE_CRON_STOP: `PIPELINE_CRON_STOP`,
  PIPELINE_DELETE: `PIPELINE_DELETE`,
  PIPELINE_PAUSE: `PIPELINE_PAUSE`,
  PIPELINE_RESUME: `PIPELINE_RESUME`,
  PIPELINE_START: `PIPELINE_START`,
  PIPELINE_STOP: `PIPELINE_STOP`,
  PIPELINE_UPDATE: `PIPELINE_UPDATE`,
  PIPELINE_VERSIONNAME_UPDATE: `PIPELINE_VERSIONNAME_UPDATE`,
  README_GET_ALGORITHM: `README_GET_ALGORITHM`,
  README_GET_PIPELINE: `README_GET_PIPELINE`,
  README_POST_ALGORITHM: `README_POST_ALGORITHM`,
  README_POST_PIPELINE: `README_POST_PIPELINE`,
  REST_REQ_CONFIG: `REST_REQ_CONFIG`,
  REST_REQ_DELETE: `REST_REQ_DELETE`,
  REST_REQ_GET: `REST_REQ_GET`,
  REST_REQ_POST_FORM: `REST_REQ_POST_FORM`,
  REST_REQ_POST: `REST_REQ_POST`,
  REST_REQ_PUT: `REST_REQ_PUT`,
  REST_REQ: `REST_REQ`,
  SOCKET_GET_CONFIG: `SOCKET_GET_CONFIG`,
  SOCKET_GET_DATA: `SOCKET_GET_DATA`,
  SOCKET_INIT: `SOCKET_INIT`,
  SOCKET_SET_URL: `SOCKET_SET_URL`,
  TENSORFLOW_START: `TENSORFLOW_START`,
  UPDATE_SETTINGS: `UPDATE_SETTINGS`,
  USER_GUIDE_CHANGE_STEP: `USER_GUIDE_CHANGE_STEP`,
  USER_GUIDE_TRIGGER: `USER_GUIDE_TRIGGER`,
  VIEW_TYPE_LOAD_ONCE: `VIEW_TYPE_LOAD_ONCE`,
  VIEW_TYPE_TOGGLE: `VIEW_TYPE_TOGGLE`,
  CONNECTION_SETUP: 'CONNECTION_SETUP',
};

const asAsync = action => {
  actionTypes[`${action}_PENDING`] = `${action}_PENDING`;
  actionTypes[`${action}_SUCCESS`] = `${action}_SUCCESS`;
  actionTypes[`${action}_REJECT`] = `${action}_REJECT`;
};

asAsync(actionTypes.SOCKET_GET_CONFIG);
asAsync(actionTypes.JOBS_KUBERNETES_LOGS);
asAsync(actionTypes.ALGORITHM_APPLY);
asAsync(actionTypes.ALGORITHM_DELETE);
asAsync(actionTypes.README_GET_PIPELINE);
asAsync(actionTypes.README_GET_ALGORITHM);
asAsync(actionTypes.README_POST_PIPELINE);
asAsync(actionTypes.README_POST_ALGORITHM);
asAsync(actionTypes.ALGORITHM_GET_VERSIONS);
asAsync(actionTypes.EXPERIMENT_CHANGE);
asAsync(actionTypes.DATASOURCE_FETCH_ALL);
asAsync(actionTypes.DATASOURCE_FETCH);
asAsync(actionTypes.DATASOURCE_CREATE);

export default actionTypes;
